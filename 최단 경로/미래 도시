import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    private static int N;
    private static int M;
    private static int X;
    private static int K;

    private static int[][] map;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        map = new int[N+1][N+1];

        // 플로이드 와샬 알고리즘의 경우, 모든 배열의 초기화를 987654321로 해야 함.
        // Integer.MAX_VALUE로 초기화 한다면 + 시 더 낮은 숫자가 나오게 되기 때문.
        for(int i=0; i<N+1; i++)
            Arrays.fill(map[i], 987654321);

        for(int i=1; i<=M; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());
            
            // 왔다갔다 가능하다 했음
            map[start][end] = 1;
            map[end][start] = 1;
        }

        // 1 - K - X
        st = new StringTokenizer(br.readLine(), " ");
        X = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        algo();
        check();
    }

    public static void algo() {
        for(int i=1; i<=N; i++) {
            for(int j=1; j<=N; j++) {
                for(int k=1; k<=N; k++) {
                    if(map[j][k] > map[j][i] + map[i][k])
                        map[j][k] = map[j][i] + map[i][k];
                }
            }
        }
    }

    public static void check() {
        // 도달하지 못하는 경우 (최초 초기화 값에서 변하지 않은 경우)
        if(map[1][K] == 987654321 || map[K][X] == 987654321)
            System.out.println("-1");
        else System.out.println(map[1][K] + map[K][X]);
    }
}
