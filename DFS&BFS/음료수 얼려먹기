import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	public static int N;
	public static int M;
	
	public static int[][] iceFrame;
	public static boolean[][] visited;
	
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        
        iceFrame = new int[N][M];
        visited = new boolean[N][M];
        
        for(int i=0; i<N; i++) {
        	String input = br.readLine();
        	
        	for(int j=0; j<input.length(); j++)
        		iceFrame[i][j] = input.charAt(j) - '0';
        }
        
        int cnt = 0;
        
        for(int i=0; i<N; i++) {
        	for(int j=0; j<M; j++) {
        		if(iceFrame[i][j] == 0 && !visited[i][j]) {
        			DFS(i, j);
        			cnt++;
        		}
        	}
        }
        
        System.out.println(cnt);
    }
    
    public static void DFS(int x, int y) {
    	if (outofmapCheck(x, y) || visited[x][y])
    		return;
    	
    	if(iceFrame[x][y] == 0) {
    		visited[x][y] = true;
    		DFS(x-1, y);
    		DFS(x+1, y);
    		DFS(x, y-1);
    		DFS(x, y+1);
    	}
    }
    
    public static boolean outofmapCheck(int x, int y) {
    	if(x<0 || y<0 || x>=N || y>=M)
    		return true;
    	return false;
    }
}
