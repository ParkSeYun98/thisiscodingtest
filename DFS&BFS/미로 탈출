package sadfeqwrwerwerqwerwerqwefxc;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	public static int N;
	public static int M;
	
	public static int[][] maze;
	public static boolean[][] visited;
	
	public static int[] dx = {-1, 1, 0, 0};
	public static int[] dy = {0, 0, -1, 1};
	
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        
        maze = new int[N][M];
        
        for(int i=0; i<N; i++) {
        	String input = br.readLine();
        	
        	for(int j=0; j<input.length(); j++)
        		maze[i][j] = input.charAt(j) - '0';
        }
        
        BFS(0, 0);
        
        System.out.println(maze[N-1][M-1]);
    }
    
    public static void BFS(int x, int y) {
    	Queue<Point> queue = new LinkedList<>();
    	queue.offer(new Point(x, y));
    	
    	while(!queue.isEmpty()) {
    		Point nowPoint = queue.poll();
    		
    		int nowX = nowPoint.x;
    		int nowY = nowPoint.y;
    		
    		for(int d=0; d<4; d++) {
    			int nextX = nowX + dx[d];
    			int nextY = nowY + dy[d];
    			
    			if(outofmapCheck(nextX, nextY) || monsterCheck(nextX, nextY))
    				continue;
    			
    			if(maze[nextX][nextY] == 1) {
    				maze[nextX][nextY] = maze[nowX][nowY] + 1;
    				queue.offer(new Point(nextX, nextY));
    			}
    		}
    	}
    }
    
    public static boolean outofmapCheck(int x, int y) {
    	if(x<0 || y<0 || x>=N || y>=M)
    		return true;
    	return false;
    }
    
    public static boolean monsterCheck(int x, int y) {
    	if(maze[x][y] == 0)
    		return true;
    	return false;
    }
    
    public static class Point {
    	int x;
    	int y;
    	
    	public Point(int x, int y) {
    		this.x = x;
    		this.y = y;
    	}
    }
}
